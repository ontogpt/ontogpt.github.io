{"version":3,"sources":["components/navigation.jsx","components/header.jsx","components/features.jsx","components/about.jsx","components/footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Navigation","props","_jsx","id","className","children","_jsxs","type","href","Header","ParticlesBg","bg","zIndex","position","top","data","title","paragraph","Features","map","d","i","icon","text","concat","About","src","alt","Why","Why2","Footer","rel","App","SmoothScroll","speed","speedAsDuration","_useState","useState","_useState2","_slicedToArray","landingPageData","setLandingPageData","useEffect","JsonData","Boolean","window","location","hostname","match","ReactDOM","render","React","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cdb670c7.chunk.js","sourcesContent":["export const Navigation = (props) => {\n  return (\n    <nav id='menu' className='navbar navbar-default navbar-fixed-top'>\n      <div className='container'>\n        <div className='navbar-header'>\n          <button\n            type='button'\n            className='navbar-toggle collapsed'\n            data-toggle='collapse'\n            data-target='#bs-example-navbar-collapse-1'\n          >\n            {' '}\n            <span className='sr-only'>Toggle navigation</span>{' '}\n            <span className='icon-bar'></span>{' '}\n            <span className='icon-bar'></span>{' '}\n            <span className='icon-bar'></span>{' '}\n          </button>\n          <a className='navbar-brand page-scroll' href='#page-top'>\n            OntoGPT\n          </a>{' '}\n        </div>\n\n        <div\n          className='collapse navbar-collapse'\n          id='bs-example-navbar-collapse-1'\n        >\n          <ul className='nav navbar-nav navbar-right'>\n            <li>\n              <a href='#features' className='page-scroll'>\n                Features\n              </a>\n            </li>\n            <li>\n              <a href='#about' className='page-scroll'>\n                About\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  )\n}\n","import ParticlesBg from \"particles-bg\";\n\nexport const Header = (props) => {\n  return (\n    <header id='header'>\n      <div className='intro'>\n        <ParticlesBg type=\"circle\" bg={{zIndex: 0, position:\"absolute\", top:0}} />\n        <div className='overlay'>\n          <div className='container'>\n          \n            <div className='row'>\n              <div className='col-md-8 col-md-offset-2 intro-text'>\n                <h1>\n                  {props.data ? props.data.title : 'Loading'}\n                  <span></span>\n                </h1>\n                <p>{props.data ? props.data.paragraph : 'Loading'}</p>\n                <a\n                  href='#features'\n                  className='btn btn-custom btn-lg page-scroll'\n                >\n                  Learn More\n                </a>{' '}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  )\n}\n","export const Features = (props) => {\n  return (\n    <div id='features' className='text-center'>\n      <div className='container'>\n        <div className='col-md-10 col-md-offset-1 section-title'>\n          <h2>Features</h2>\n        </div>\n        <div className='row'>\n          {props.data\n            ? props.data.map((d, i) => (\n                <div key={`${d.title}-${i}`} className='col-xs-6 col-md-3'>\n                  {' '}\n                  <i className={d.icon}></i>\n                  <h3>{d.title}</h3>\n                  <p>{d.text}</p>\n                </div>\n              ))\n            : 'Loading...'}\n        </div>\n        <div className='row'>\n          <a href=\"https://github.com/monarchinitiative.org/ontogpt\">github.com/monarchinitiative.org/ontogpt</a>  \n        </div>\n      </div>\n    </div>\n  )\n}\n","export const About = (props) => {\n  return (\n    <div id='about'>\n      <div className='container'>\n        <div className='row'>\n          <div className='col-xs-12 col-md-6'>\n            {' '}\n            <img src='img/about.jpg' className='img-responsive' alt='' />{' '}\n          </div>\n          <div className='col-xs-12 col-md-6'>\n            <div className='about-text'>\n              <h2>About</h2>\n              <p>{props.data ? props.data.paragraph : 'loading...'}</p>\n              Find out more on our GitHub repo: <a href=\"https://github.com/monarchinitiative.org/ontogpt\">github.com/monarchinitiative.org/ontogpt</a>  \n              <h3>Why OntoGPT?</h3>\n              <div className='list-style'>\n                <div className='col-lg-6 col-sm-6 col-xs-12'>\n                  <ul>\n                    {props.data\n                      ? props.data.Why.map((d, i) => (\n                          <li key={`${d}-${i}`}>{d}</li>\n                        ))\n                      : 'loading'}\n                  </ul>\n                </div>\n                <div className='col-lg-6 col-sm-6 col-xs-12'>\n                  <ul>\n                    {props.data\n                      ? props.data.Why2.map((d, i) => (\n                          <li key={`${d}-${i}`}> {d}</li>\n                        ))\n                      : 'loading'}\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","export const Footer = (props) => {\n  \n  return (\n    <div>\n      <div id='footer'>\n        <div className='container text-center'>\n          <p>\n            &copy; 2020 Issaaf Kattan React Land Page Template. Design by{' '}\n            <a href='http://www.templatewire.com' rel='nofollow'>\n              TemplateWire\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport { Navigation } from './components/navigation'\nimport { Header } from './components/header'\nimport { Features } from './components/features'\nimport { About } from './components/about'\nimport { Footer } from './components/footer'\nimport JsonData from './data/data.json'\nimport SmoothScroll from 'smooth-scroll'\n\nexport const scroll = new SmoothScroll('a[href*=\"#\"]', {\n  speed: 1000,\n  speedAsDuration: true,\n})\n\nconst App = () => {\n  const [landingPageData, setLandingPageData] = useState({})\n  useEffect(() => {\n    setLandingPageData(JsonData)\n  }, [])\n\n  return (\n    <div>\n      <Navigation />\n      <Header data={landingPageData.Header} />\n      <Features data={landingPageData.Features} />\n      <About data={landingPageData.About} />\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}